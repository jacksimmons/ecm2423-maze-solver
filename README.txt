Prerequisites:-
A C++ compiler (e.g. g++, msvc) and C++ compatible processor.


Errors:-
If you get an error, first try your program again with the 4 default mazes.
If it now works (expected on a stable branch), then it is an issue with your maze (see below).


Mazes:-
A maze (maze file) must follow these rules for the program to run as expected:
(! means there is no error check in place for this rule)
1! It must have a rectangular shape (see the example below).
2. It must have one start node and one goal node.
3! It must be encased in an outer 'shell' of walls.
4! It must only contain valid characters
5! It must have no leading/trailing newlines, except for the standard newline at the end of CRLF (windows)
text files. (Intended to change in case this causes issues with Linux/MacOS)
Errors generated by undefined behaviour (inputs not satisfying the above rules)
are not considered bugs, but the program will still attempt to warn you.

Mazes are defined by certain characters, which can be easily changed if you want in Maze.hpp:
Wall (#)
Empty, traversable (-)
Start, traversable (s)
Goal, traversable (g)
In maze output, a few other characters are also used:
Visited (.)
Path (x)
Mazes must be placed in the "mazes" folder, and referred to by their filename (e.g. maze-Easy.txt).

With the above descriptions, here is an example (dimensions 10x5):

#s########
#--------#
#######-##
####----##
#######g##


Output:
The program outputs to PathOutput.txt, which lists the Cartesian Coordinate path from start to goal.
Note that the Cartesian Coordinates I used follow these rules:
- Origin (0,0) is in the top left, and all coordinates have positive x and y for that reason.
- Right is +x, Left is -x
- Up is -y, Down is +y
The program optionally outputs to MazeOutput.txt, where the input maze is copied, and the path the
maze followed, as well as other visited nodes, are overlayed on top of it.
MazeOutput.txt output is disabled by default, since it is slow for large mazes.


Compiling and running:
1. g++ *.cpp -o [executable-name]
2. ./[executable-name] [MAZE_FILE: string] [ALGOITHM: string] [ITERATIONS: uint] [OUTPUT_MAZE: bool]

No arguments leads to the default process (maze-Easy.txt, DFS, 1, false).

[MAZE_FILE] default: "maze-Easy.txt"
    The name of any maze file under the mazes folder, that you want solved.
    Additionally, the following phrases can be used as shortcuts for the 4 default mazes:
    "E" - maze-Easy.txt
    "M" - maze-Medium.txt
    "L" - maze-Large.txt
    "VL" - maze-VLarge.txt


[ALGORITHM] default: "dfs"
    The search algorithm to use, as one lowercase word; "astar" or "dfs".

[ITERATIONS] default: "1"
    An integer greater than 0. The number of executions to carry out (use more than 1 to get a better
    estimate for average speed). Output is unaffected by this parameter.

[OUTPUT_MAZE] default: "true"
    whether to output the maze calculated by the algorithm to MazeOutput.txt

[OUTPUT_PATH] default: "true"
    whether to output the path calculated to PathOutput.txt

[OUTPUT_CONSOLE] default: "true"
    enable all, or disable most console messages


Depth-First Search:
A quick and simple algorithm which isn't optimal.


Breadth-First Search:
A quick and simple algorithm which is optimal, but has a high space complexity.


A* Search:
An optimal algorithm which minimises the path by distance. (i.e. it finds the shortest path)
This is equivalent to finding the path with the fewest nodes in this search space.


Performance:
To improve performance, insert -flto (standard link-time optimiser) or -O1, -O2 or -O3 (increasingly aggressive optimisation)
compiler optimisation flags before the -o flag in your compiler execution:
e.g. g++ *.cpp -O3 -flto -o [executable-name]
Since smaller mazes are already very quick, this will only have a major impact on the larger mazes.